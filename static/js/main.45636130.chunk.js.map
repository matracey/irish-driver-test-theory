{"version":3,"sources":["components/Presenters/ImageOption/ImageOption.jsx","components/Presenters/TextOption/TextOption.jsx","helpers.js","components/Containers/Questions/Questions.jsx","components/Presenters/Header/Header.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ImageOption","props","imageSrc","possibleValues","alt","onChange","onClickSubmit","react_default","a","createElement","className","Image","src","width","ChoiceGroup","options","label","required","PrimaryButton","text","onClick","TextOption","shuffleArray","counter","length","index","Math","floor","random","temp","Questions","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeSelectedOption","_event","option","setState","selectedOption","_this$state","state","remainingQuestions","answeredQuestions","q","value","answeredQuestion","splice","push","map","v","indexOf","disabled","loadQuestionData","inputData","questionData","Array","from","filter","qF","qM","key","concat","id","slice","objectSpread","toConsumableArray","reloadQuestions","signData","theoryData","bind","assertThisInitialized","_this2","dir","Presenters_ImageOption_ImageOption","Presenters_TextOption_TextOption","Component","Header","appName","App","Presenters_Header_Header","process","Containers_Questions_Questions","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45636130.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ImageOption.css\";\r\n\r\nimport {\r\n    Image,\r\n    ChoiceGroup,\r\n    PrimaryButton\r\n} from \"office-ui-fabric-react\";\r\n\r\nconst ImageOption = (props) => {\r\n    const {\r\n        imageSrc,\r\n        possibleValues,\r\n        alt,\r\n        onChange,\r\n        onClickSubmit,\r\n    } = props;\r\n    return (\r\n        <div className=\"image-option-container d-flex flex-column align-items-center\">\r\n            <Image\r\n                src={imageSrc}\r\n                alt={alt}\r\n                width={150}\r\n            />\r\n            <ChoiceGroup\r\n                options={possibleValues}\r\n                onChange={onChange}\r\n                label=\"Please choose an answer\"\r\n                required\r\n                className=\"mt-3\"\r\n            />\r\n            <PrimaryButton\r\n                text=\"Submit\"\r\n                onClick={onClickSubmit}\r\n                className=\"mt-3\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nImageOption.propTypes = {\r\n    imageSrc: PropTypes.string.isRequired,\r\n    possibleValues: PropTypes.arrayOf(PropTypes.shape({\r\n        key: PropTypes.string.isRequired,\r\n        text: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func,\r\n    onClickSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ImageOption;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./TextOption.css\";\n\nimport {\n    ChoiceGroup,\n    PrimaryButton\n} from \"office-ui-fabric-react\";\n\nconst TextOption = (props) => {\n    const {\n        text,\n        possibleValues,\n        onChange,\n        onClickSubmit,\n    } = props;\n    return (\n        <div className=\"text-option-container d-flex flex-column align-items-center\">\n            <div className=\"ms-font-l ms-textAlignCenter\">\n                {text}\n            </div>\n            <ChoiceGroup\n                options={possibleValues}\n                onChange={onChange}\n                label=\"Please choose an answer\"\n                required\n                className=\"mt-3\"\n            />\n            <PrimaryButton\n                text=\"Submit\"\n                onClick={onClickSubmit}\n                className=\"mt-3\"\n            />\n        </div>\n    );\n};\n\nTextOption.propTypes = {\n    text: PropTypes.string.isRequired,\n    possibleValues: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string.isRequired,\n        text: PropTypes.string.isRequired,\n    })).isRequired,\n    onChange: PropTypes.func,\n    onClickSubmit: PropTypes.func,\n};\n\nexport default TextOption;","export const shuffleArray = (a) => {\n    let counter = a.length;\n\n    while (counter > 0) {\n        const index = Math.floor(Math.random() * counter);\n        counter -= 1;\n        const temp = a[counter];\n        a[counter] = a[index];\n        a[index] = temp;\n    }\n\n    return a;\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { PrimaryButton } from \"office-ui-fabric-react\";\n\nimport ImageOption from \"../../Presenters/ImageOption/ImageOption\";\nimport TextOption from \"../../Presenters/TextOption/TextOption\";\n\nimport { shuffleArray } from \"../../../helpers\";\n\nclass Questions extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onChangeSelectedOption = this.onChangeSelectedOption.bind(this);\n        this.onClickSubmit = this.onClickSubmit.bind(this);\n        this.loadQuestionData = this.loadQuestionData.bind(this);\n        this.reloadQuestions = this.reloadQuestions.bind(this);\n\n        const { signData, theoryData } = props;\n\n        this.signData = signData;\n        this.theoryData = theoryData;\n\n        this.state = {\n            remainingQuestions: this.reloadQuestions(),\n            answeredQuestions: [],\n            selectedOption: \"\",\n        };\n    }\n\n    signData;\n\n    theoryData;\n\n    onChangeSelectedOption = (_event, option) => this.setState({ selectedOption: option.text });\n\n    onClickSubmit = () => {\n        const { selectedOption, remainingQuestions, answeredQuestions } = this.state;\n        const q = remainingQuestions[0];\n\n        if (q.value === selectedOption) {\n            const answeredQuestion = remainingQuestions.splice(0, 1);\n            answeredQuestions.push(answeredQuestion);\n        } else {\n            const index = q.possibleValues.map(v => v.text).indexOf(selectedOption);\n            if (index >= 0) {\n                remainingQuestions[0].possibleValues[index].disabled = true;\n            }\n        }\n        this.setState({ selectedOption: \"\", remainingQuestions, answeredQuestions });\n    }\n\n    loadQuestionData = (inputData) => {\n        let questionData = shuffleArray(Array.from(inputData));\n        questionData = questionData.map((q) => {\n            let possibleValues = (q.possibleValues || questionData).filter(qF => qF.value !== q.value).map(qM => ({ key: `option-${qM.id}`, text: qM.value, disabled: false }));\n            if (q.possibleValues == null || q.possibleValues.length <= 0) { possibleValues = possibleValues.slice(0, 3); }\n            return { ...q, possibleValues: shuffleArray([...possibleValues, { key: `option-${q.id}`, text: q.value, disabled: false }]) };\n        });\n        return questionData;\n    }\n\n    reloadQuestions = () => shuffleArray([...this.loadQuestionData(this.signData), ...this.loadQuestionData(this.theoryData)]);\n\n    render() {\n        const { remainingQuestions } = this.state;\n        const { className } = this.props;\n\n        if (remainingQuestions == null || remainingQuestions.length <= 0) {\n            return (\n                <div className={`${className ? `${className} ` : \"\"}ms-Grid d-flex flex-column justify-content-center align-items-center ms-textAlignCenter`} dir=\"ltr\">\n                    <div className=\"ms-Grid-row\">\n                        <div className=\"ms-Grid-col ms-sm12 d-flex justify-content-center\">\n                            <h1>You&rsquo;ve answered all of the questions!</h1>\n                        </div>\n                    </div>\n                    <div className=\"ms-Grid-row\">\n                        <div className=\"ms-Grid-col ms-sm12 d-flex justify-content-center\">\n                            <PrimaryButton\n                                text=\"Start Again?\"\n                                onClick={() => this.setState({ remainingQuestions: this.reloadQuestions() })}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        const q = remainingQuestions[0];\n        let option = \"\";\n        if (q.imageSrc != null) {\n            option = (\n                <ImageOption\n                    key={`option-${q.id}`}\n                    imageSrc={q.imageSrc}\n                    possibleValues={q.possibleValues}\n                    alt={q.alt}\n                    onChange={this.onChangeSelectedOption}\n                    onClickSubmit={this.onClickSubmit}\n                />\n            );\n        } else {\n            option = (\n                <TextOption\n                    key={`option-${q.id}`}\n                    text={q.text}\n                    possibleValues={q.possibleValues}\n                    onChange={this.onChangeSelectedOption}\n                    onClickSubmit={this.onClickSubmit}\n                />\n            );\n        }\n\n        return (\n            <div className=\"ms-Grid d-flex justify-content-center align-items-center h-100 mh-3\" dir=\"ltr\">\n                <div className=\"ms-Grid-row\">\n                    <div className=\"ms-Grid-col ms-sm12 d-flex justify-content-center\">\n                        {option}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nQuestions.propTypes = {\n    signData: PropTypes.array.isRequired,\n    theoryData: PropTypes.array.isRequired,\n    className: PropTypes.string,\n};\n\nexport default Questions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Header.css\";\n\nconst Header = (props) => {\n    const { appName, className } = props;\n\n    return (\n        <header className={`${className ? `${className} ` : \"\"}w-100 d-flex justify-content-left align-items-center`}>\n            <div className=\"logo ml-1\" />\n            <span className=\"ml-1 ms-font-xl\">{appName}</span>\n        </header>\n    );\n};\n\nHeader.propTypes = {\n    appName: PropTypes.string.isRequired,\n    className: PropTypes.string,\n};\n\nexport default Header;","import React from \"react\";\n\nimport Questions from \"./components/Containers/Questions/Questions\";\nimport Header from \"./components/Presenters/Header/Header\";\n\nimport signData from \"./sign-data.json\";\nimport theoryData from \"./theory-data.json\";\n\nimport \"./App.css\";\n\nconst App = () => (\n    <div className=\"app d-flex flex-column\">\n        <Header appName={process.env.REACT_APP_APP_NAME} />\n        <Questions\n            signData={signData}\n            theoryData={theoryData}\n        />\n    </div>\n);\n\nexport default App;\n","/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nconst registerValidSW = (swUrl, config) => {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n};\r\n\r\nconst checkValidServiceWorker = (swUrl, config) => {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n};\r\n\r\nexport const register = (config) => {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const unregister = () => {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"office-ui-fabric-react/dist/css/fabric.min.css\";\nimport \"./index.css\";\nimport \"./helpers.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}