{"version":3,"sources":["components/ImageOption/ImageOption.jsx","components/TextOption/TextOption.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ImageOption","props","imageSrc","possibleValues","alt","onChange","onClickSubmit","react_default","a","createElement","className","Image","src","width","ChoiceGroup","options","label","required","PrimaryButton","text","onClick","TextOption","shuffle","counter","length","index","Math","floor","random","temp","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeSelectedOption","_event","option","setState","selectedOption","_this$state","state","remainingQuestions","answeredQuestions","q","value","answeredQuestion","splice","push","map","v","indexOf","disabled","loadQuestionData","inputData","questionData","Array","from","_ref","id","toConsumableArray","filter","qF","qM","key","concat","slice","reloadQuestions","signData","theoryData","bind","assertThisInitialized","_this2","dir","components_ImageOption_ImageOption","components_TextOption_TextOption","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ihwBAqDeA,EA1CK,SAACC,GAAU,IAEvBC,EAKAD,EALAC,SACAC,EAIAF,EAJAE,eACAC,EAGAH,EAHAG,IACAC,EAEAJ,EAFAI,SACAC,EACAL,EADAK,cAEJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gEACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,IAAKV,EACLE,IAAKA,EACLS,MAAO,MAEXN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACIC,QAASZ,EACTE,SAAUA,EACVW,MAAM,0BACNC,UAAQ,EACRP,UAAU,SAEdH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIC,KAAK,SACLC,QAASd,EACTI,UAAU,WCYXW,SAtCI,SAACpB,GAAU,IAEtBkB,EAIAlB,EAJAkB,KACAhB,EAGAF,EAHAE,eACAE,EAEAJ,EAFAI,SACAC,EACAL,EADAK,cAEJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+DACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVS,GAELZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACIC,QAASZ,EACTE,SAAUA,EACVW,MAAM,0BACNC,UAAQ,EACRP,UAAU,SAEdH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIC,KAAK,SACLC,QAASd,EACTI,UAAU,4BCpBpBY,SAAU,SAACd,GAGb,IAFA,IAAIe,EAAUf,EAAEgB,OAETD,EAAU,GAAG,CAChB,IAAME,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAEnCM,EAAOrB,EADbe,GAAW,GAEXf,EAAEe,GAAWf,EAAEiB,GACfjB,EAAEiB,GAASI,EAGf,OAAOrB,IAgIIsB,cA5HX,SAAAA,EAAY7B,GAAO,IAAA8B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjC,KAcVqC,uBAAyB,SAACC,EAAQC,GAAT,OAAoBT,EAAKU,SAAS,CAAEC,eAAgBF,EAAOrB,QAfjEY,EAiBnBzB,cAAgB,WAAM,IAAAqC,EACgDZ,EAAKa,MAA/DF,EADUC,EACVD,eAAgBG,EADNF,EACME,mBAAoBC,EAD1BH,EAC0BG,kBACtCC,EAAIF,EAAmB,GAE7B,GAAIE,EAAEC,QAAUN,EAAgB,CAC5B,IAAMO,EAAmBJ,EAAmBK,OAAO,EAAG,GACtDJ,EAAkBK,KAAKF,OACpB,CACH,IAAMxB,EAAQsB,EAAE5C,eAAeiD,IAAI,SAAAC,GAAC,OAAIA,EAAElC,OAAMmC,QAAQZ,GACpDjB,GAAS,IACToB,EAAmB,GAAG1C,eAAesB,GAAO8B,UAAW,GAG/DxB,EAAKU,SAAS,CAAEC,eAAgB,GAAIG,qBAAoBC,uBA9BzCf,EAiCnByB,iBAAmB,SAACC,GAChB,IAAIC,EAAepC,EAAQqC,MAAMC,KAAKH,IAyBtC,OAxBAC,EAAeA,EAAaN,IAAI,SAAAS,GAAA,IAC5BC,EAD4BD,EAC5BC,GACA5D,EAF4B2D,EAE5B3D,SACAiB,EAH4B0C,EAG5B1C,KACA6B,EAJ4Ba,EAI5Bb,MACA5C,EAL4ByD,EAK5BzD,IACAD,EAN4B0D,EAM5B1D,eAN4B,MAOzB,CACH2D,KACA5D,WACAiB,OACA6B,QACA5C,MACAD,eAAkC,MAAlBA,GAA0BA,EAAeqB,OAAS,EAC9DF,EAAQU,OAAA+B,EAAA,EAAA/B,CACD7B,EAAe6D,OAAO,SAAAC,GAAE,OAAIA,EAAGjB,QAAUA,IAAOI,IAAI,SAAAc,GAAE,MAAK,CAAEC,IAAG,UAAAC,OAAYF,EAAGJ,IAAM3C,KAAM+C,EAAGlB,MAAOO,UAAU,MAD/Ga,OAAA,CAEH,CAAED,IAAG,UAAAC,OAAYN,GAAM3C,KAAM6B,EAAOO,UAAU,MAElDjC,EAAQU,OAAA+B,EAAA,EAAA/B,CACDV,EAAQoC,EAAaM,OAAO,SAAAC,GAAE,OAAIA,EAAGjB,QAAUA,KAAQI,IAAI,SAAAc,GAAE,MAAK,CAAEC,IAAG,UAAAC,OAAYF,EAAGJ,IAAM3C,KAAM+C,EAAGlB,MAAOO,UAAU,KAAUc,MAAM,EAAG,IADzID,OAAA,CAEH,CAAED,IAAG,UAAAC,OAAYN,GAAM3C,KAAM6B,EAAOO,UAAU,UAvD3CxB,EA8DnBuC,gBAAkB,kBAAMhD,EAAQU,OAAA+B,EAAA,EAAA/B,CAAID,EAAKyB,iBAAiBe,IAA3BH,OAAApC,OAAA+B,EAAA,EAAA/B,CAAyCD,EAAKyB,iBAAiBgB,OA3D1FzC,EAAKO,uBAAyBP,EAAKO,uBAAuBmC,KAA5BzC,OAAA0C,EAAA,EAAA1C,QAAA0C,EAAA,EAAA1C,CAAAD,KAC9BA,EAAKzB,cAAgByB,EAAKzB,cAAcmE,KAAnBzC,OAAA0C,EAAA,EAAA1C,QAAA0C,EAAA,EAAA1C,CAAAD,KACrBA,EAAKyB,iBAAmBzB,EAAKyB,iBAAiBiB,KAAtBzC,OAAA0C,EAAA,EAAA1C,QAAA0C,EAAA,EAAA1C,CAAAD,KACxBA,EAAKuC,gBAAkBvC,EAAKuC,gBAAgBG,KAArBzC,OAAA0C,EAAA,EAAA1C,QAAA0C,EAAA,EAAA1C,CAAAD,KAEvBA,EAAKa,MAAQ,CACTC,mBAAoBd,EAAKuC,kBACzBxB,kBAAmB,GACnBJ,eAAgB,IAXLX,wEAgEV,IAAA4C,EAAAzC,KACGW,EAAuBX,KAAKU,MAA5BC,mBAER,GAA0B,MAAtBA,GAA8BA,EAAmBrB,QAAU,EAC3D,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iGAAiGkE,IAAI,OAChHrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAAA,wCAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIC,KAAK,eACLC,QAAS,kBAAMuD,EAAKlC,SAAS,CAAEI,mBAAoB8B,EAAKL,0BAQhF,IAAMvB,EAAIF,EAAmB,GACzBL,EAAS,GAwBb,OAtBIA,EADc,MAAdO,EAAE7C,SAEEK,EAAAC,EAAAC,cAACoE,EAAD,CACIV,IAAG,UAAAC,OAAYrB,EAAEe,IACjB5D,SAAU6C,EAAE7C,SACZC,eAAgB4C,EAAE5C,eAClBC,IAAK2C,EAAE3C,IACPC,SAAU6B,KAAKI,uBACfhC,cAAe4B,KAAK5B,gBAKxBC,EAAAC,EAAAC,cAACqE,EAAD,CACIX,IAAG,UAAAC,OAAYrB,EAAEe,IACjB3C,KAAM4B,EAAE5B,KACRhB,eAAgB4C,EAAE5C,eAClBE,SAAU6B,KAAKI,uBACfhC,cAAe4B,KAAK5B,gBAM5BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kEAAkEkE,IAAI,OACjFrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACV8B,YArHPuC,aCbEC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,uECVRC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SDsHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAChCA,EAAaC","file":"static/js/main.21964d30.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ImageOption.css\";\r\n\r\nimport {\r\n    Image,\r\n    ChoiceGroup,\r\n    PrimaryButton\r\n} from \"office-ui-fabric-react\";\r\n\r\nconst ImageOption = (props) => {\r\n    const {\r\n        imageSrc,\r\n        possibleValues,\r\n        alt,\r\n        onChange,\r\n        onClickSubmit,\r\n    } = props;\r\n    return (\r\n        <div className=\"image-option-container d-flex flex-column align-items-center\">\r\n            <Image\r\n                src={imageSrc}\r\n                alt={alt}\r\n                width={150}\r\n            />\r\n            <ChoiceGroup\r\n                options={possibleValues}\r\n                onChange={onChange}\r\n                label=\"Please choose an answer\"\r\n                required\r\n                className=\"mt-3\"\r\n            />\r\n            <PrimaryButton\r\n                text=\"Submit\"\r\n                onClick={onClickSubmit}\r\n                className=\"mt-3\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nImageOption.propTypes = {\r\n    imageSrc: PropTypes.string.isRequired,\r\n    possibleValues: PropTypes.arrayOf(PropTypes.shape({\r\n        key: PropTypes.string.isRequired,\r\n        text: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func,\r\n    onClickSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ImageOption;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./TextOption.css\";\r\n\r\nimport {\r\n    ChoiceGroup,\r\n    PrimaryButton\r\n} from \"office-ui-fabric-react\";\r\n\r\nconst TextOption = (props) => {\r\n    const {\r\n        text,\r\n        possibleValues,\r\n        onChange,\r\n        onClickSubmit,\r\n    } = props;\r\n    return (\r\n        <div className=\"text-option-container d-flex flex-column align-items-center\">\r\n            <div className=\"ms-font-l\">\r\n                {text}\r\n            </div>\r\n            <ChoiceGroup\r\n                options={possibleValues}\r\n                onChange={onChange}\r\n                label=\"Please choose an answer\"\r\n                required\r\n                className=\"mt-3\"\r\n            />\r\n            <PrimaryButton\r\n                text=\"Submit\"\r\n                onClick={onClickSubmit}\r\n                className=\"mt-3\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nTextOption.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    possibleValues: PropTypes.arrayOf(PropTypes.shape({\r\n        key: PropTypes.string.isRequired,\r\n        text: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n    onChange: PropTypes.func,\r\n    onClickSubmit: PropTypes.func,\r\n};\r\n\r\nexport default TextOption;","import React, { Component } from \"react\";\r\n\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\n\r\nimport ImageOption from \"./components/ImageOption/ImageOption\";\r\nimport TextOption from \"./components/TextOption/TextOption\";\r\n\r\nimport signData from \"./sign-data.json\";\r\nimport theoryData from \"./theory-data.json\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst shuffle = (a) => {\r\n    let counter = a.length;\r\n\r\n    while (counter > 0) {\r\n        const index = Math.floor(Math.random() * counter);\r\n        counter -= 1;\r\n        const temp = a[counter];\r\n        a[counter] = a[index];\r\n        a[index] = temp;\r\n    }\r\n\r\n    return a;\r\n};\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeSelectedOption = this.onChangeSelectedOption.bind(this);\r\n        this.onClickSubmit = this.onClickSubmit.bind(this);\r\n        this.loadQuestionData = this.loadQuestionData.bind(this);\r\n        this.reloadQuestions = this.reloadQuestions.bind(this);\r\n\r\n        this.state = {\r\n            remainingQuestions: this.reloadQuestions(),\r\n            answeredQuestions: [],\r\n            selectedOption: \"\",\r\n        };\r\n    }\r\n\r\n    onChangeSelectedOption = (_event, option) => this.setState({ selectedOption: option.text });\r\n\r\n    onClickSubmit = () => {\r\n        const { selectedOption, remainingQuestions, answeredQuestions } = this.state;\r\n        const q = remainingQuestions[0];\r\n\r\n        if (q.value === selectedOption) {\r\n            const answeredQuestion = remainingQuestions.splice(0, 1);\r\n            answeredQuestions.push(answeredQuestion);\r\n        } else {\r\n            const index = q.possibleValues.map(v => v.text).indexOf(selectedOption);\r\n            if (index >= 0) {\r\n                remainingQuestions[0].possibleValues[index].disabled = true;\r\n            }\r\n        }\r\n        this.setState({ selectedOption: \"\", remainingQuestions, answeredQuestions });\r\n    }\r\n\r\n    loadQuestionData = (inputData) => {\r\n        let questionData = shuffle(Array.from(inputData));\r\n        questionData = questionData.map(({\r\n            id,\r\n            imageSrc,\r\n            text,\r\n            value,\r\n            alt,\r\n            possibleValues\r\n        }) => ({\r\n            id,\r\n            imageSrc,\r\n            text,\r\n            value,\r\n            alt,\r\n            possibleValues: possibleValues != null && possibleValues.length > 0 ?\r\n                shuffle([\r\n                    ...possibleValues.filter(qF => qF.value !== value).map(qM => ({ key: `option-${qM.id}`, text: qM.value, disabled: false })),\r\n                    { key: `option-${id}`, text: value, disabled: false }\r\n                ]) :\r\n                shuffle([\r\n                    ...shuffle(questionData.filter(qF => qF.value !== value)).map(qM => ({ key: `option-${qM.id}`, text: qM.value, disabled: false })).slice(0, 3),\r\n                    { key: `option-${id}`, text: value, disabled: false }\r\n                ]),\r\n        }));\r\n\r\n        return questionData;\r\n    }\r\n\r\n    reloadQuestions = () => shuffle([...this.loadQuestionData(signData), ...this.loadQuestionData(theoryData)]);\r\n\r\n    render() {\r\n        const { remainingQuestions } = this.state;\r\n\r\n        if (remainingQuestions == null || remainingQuestions.length <= 0) {\r\n            return (\r\n                <div className=\"ms-Grid d-flex flex-column justify-content-center align-items-center vh-100 ms-textAlignCenter\" dir=\"ltr\">\r\n                    <div className=\"ms-Grid-row\">\r\n                        <div className=\"ms-Grid-col ms-sm12 d-flex justify-content-center\">\r\n                            <h1>No questions to display!</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ms-Grid-row\">\r\n                        <div className=\"ms-Grid-col ms-sm12 d-flex justify-content-center\">\r\n                            <PrimaryButton\r\n                                text=\"Start Again?\"\r\n                                onClick={() => this.setState({ remainingQuestions: this.reloadQuestions() })}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const q = remainingQuestions[0];\r\n        let option = \"\";\r\n        if (q.imageSrc != null) {\r\n            option = (\r\n                <ImageOption\r\n                    key={`option-${q.id}`}\r\n                    imageSrc={q.imageSrc}\r\n                    possibleValues={q.possibleValues}\r\n                    alt={q.alt}\r\n                    onChange={this.onChangeSelectedOption}\r\n                    onClickSubmit={this.onClickSubmit}\r\n                />\r\n            );\r\n        } else {\r\n            option = (\r\n                <TextOption\r\n                    key={`option-${q.id}`}\r\n                    text={q.text}\r\n                    possibleValues={q.possibleValues}\r\n                    onChange={this.onChangeSelectedOption}\r\n                    onClickSubmit={this.onClickSubmit}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"ms-Grid d-flex justify-content-center align-items-center vh-100\" dir=\"ltr\">\r\n                <div className=\"ms-Grid-row ms-textAlignCenter\">\r\n                    <div className=\"ms-Grid-col ms-sm12 d-flex justify-content-center\">\r\n                        {option}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nconst registerValidSW = (swUrl, config) => {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n};\r\n\r\nconst checkValidServiceWorker = (swUrl, config) => {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n};\r\n\r\nexport const register = (config) => {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const unregister = () => {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./index.css\";\r\nimport \"./helpers.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}